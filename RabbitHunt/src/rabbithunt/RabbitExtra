
package rabbithunt;

public class Rabbit extends Animal {

    private boolean haveSeenFox = false;
    private boolean canSeeFoxNow = false;
    private int distanceToFox;
    private int directionToFox;
    private int currentDirection;

    public Rabbit(Model model, int row, int column) {
        super(model, row, column);
        currentDirection = Model.random(Model.MIN_DIRECTION,
                Model.MAX_DIRECTION);
    }

    int decideMove() {
        // look all around for fox
        canSeeFoxNow = false;
        for (int i = Model.MIN_DIRECTION; i <= Model.MAX_DIRECTION; i++) {
            if (look(i) == Model.FOX) {
                canSeeFoxNow = haveSeenFox = true;
                currentDirection = directionToFox = i;
                //currentDirection = Model.turn(directionToFox, 4);
                distanceToFox = distance(i);
            }
        }
        // if fox has been seen recently (not necessarily this time),
        // check if the rabbit can move in each direction, if not then turn to other directions.  
        if (canSeeFoxNow && haveSeenFox) {
            if (distanceToFox > 0) {
                if (canMove(Model.turn(currentDirection, -3))) {
                    return Model.turn(currentDirection, -3);
                } else if (canMove(Model.turn(currentDirection, 3))) {
                    return Model.turn(currentDirection, 3);
                } else if (canMove(Model.turn(currentDirection, -2))) {
                    return Model.turn(currentDirection, -2);
                } else if (canMove(Model.turn(currentDirection, 2))) {
                    return Model.turn(currentDirection, 2);
                } else if (canMove(Model.turn(currentDirection, -1))) {
                    return Model.turn(currentDirection, -1);
                } else if (canMove(Model.turn(currentDirection, 1))) {
                    return Model.turn(currentDirection, 1);
                }
            }
        }
        if (haveSeenFox == false) {
            return Model.STAY;
        }
        return Model.STAY;
    }
}
